# This is a basic workflow to help you get started with Actions
name: light-emitting-diode - CI

on:
  push:
    branches:
      - master
    tags:
      - v*
    paths:
      - "light-emitting-diode/**"
      - "!light-emitting-diode/**/*.md"
      - "!light-emitting-diode/**/.gitignore"
      - "!light-emitting-diode/docs/**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  TARGET_PLATFORMS: linux/arm/v7

jobs:
  build-and-push-image:
    name: "Build & Push: Image"
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: lyscm/lyscm.rpi.gpio-pins/light-emitting-diode

    steps:
      - name: 1 - Checkout
        uses: actions/checkout@v2

      - name: 2 - Access Registry
        if: success() && github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 3 - Setup Registry Metadata
        id: metadata
        run: |

          # Change all uppercase to lowercase
          IMAGE_ID=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          if [[ "${{ github.ref }}" == "refs/tags/"* ]]; then
            VERSION=$(echo $VERSION | sed -e 's/^v//')
          fi

          # Set tag as nightly
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          fi

          # Use `latest` tag convention
          if [ "$VERSION" == "master" ]; then 
            VERSION=latest
            echo IMAGE_ID=$IMAGE_ID
            echo VERSION=$VERSION
          fi

          # Use versioning tag convention
          TAGS="--tag ${IMAGE_ID}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS --tag ${IMAGE_ID}:latest"
          fi

          # Set outputs
          echo ::set-output name=image_id::${IMAGE_ID}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=buildx_args::--cache-from "type=local,src=${{ github.workspace }}/.buildx-cache" \
            --cache-to "type=local,dest=${{ github.workspace }}/.buildx-cache" \
            --platform ${{ env.TARGET_PLATFORMS }} \
            --build-arg VERSION=${VERSION} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${GITHUB_SHA::8} \
            --file "light-emitting-diode/Dockerfile" \
            ${TAGS} \
            ./light-emitting-diode

      - name: 4 - Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: 5 - Setup Build
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: 6 - Setup Caching
        uses: actions/cache@v2
        id: cache
        with:
          path: ${{ github.workspace }}/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashfiles('.buildx-cache/**') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: 7 - Build & Push Packages
        if: success() && github.event_name != 'pull_request'
        run: |
          docker buildx build --output "type=image,push=true" ${{ steps.metadata.outputs.buildx_args }}

      - name: 9 - Inspect Packages
        if: always() && github.event_name != 'pull_request'
        run: |
          docker buildx imagetools inspect ${{ steps.metadata.outputs.image_id }}:${{ steps.metadata.outputs.version }}